datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  about         String?
  accounts      Account[]
  sessions      Session[]

  stripeCustomerId String? @unique

  userType            UserType?
  onboardingCompleted Boolean   @default(false)

  Company Company?

  SavedJobPost SavedJobPost[]

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  JobSeeker  JobSeeker?
  JuryMember JuryMember?
}

enum UserType {
  COMPANY
  JOB_SEEKER
  JURY
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Company {
  id String @id @default(uuid())

  name     String
  location String
  about    String
  logo     String
  website  String
  xAccount String?

  JobPost JobPost[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobSeeker {
  id String @id @default(uuid())

  name       String
  about      String
  activities Json // frontend’ten gelen { A1: { count, authors }, … }
  totalScore Int?
  resume     String
  user       User   @relation(fields: [userId], references: [id])
  userId     String @unique

  applications Application[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobPost {
  id String @id @default(uuid())

  jobTitle        String
  jobDescription  String
  location        String
  salaryFrom      Int
  salaryTo        Int
  employmentType  String
  listingDuration Int
  benefits        String[]

  status JobPostStatus @default(DRAFT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Company   Company  @relation(fields: [companyId], references: [id])
  companyId String

  applications Application[]
  SavedJobPost SavedJobPost[]
}

model JuryMember {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  evaluations JuryEvaluation[]
}

model JuryEvaluation {
  id            String         @id @default(uuid())
  juryMember    JuryMember     @relation(fields: [juryMemberId], references: [id], onDelete: Cascade)
  juryMemberId  String
  application   Application    @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String
  reportUrl     String
  decision      ReviewDecision @default(APPROVED)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([juryMemberId, applicationId])
}

model SavedJobPost {
  id String @id @default(uuid())

  JobPost   JobPost @relation(fields: [jobPostId], references: [id])
  jobPostId String
  User      User    @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, jobPostId])
}

enum JobPostStatus {
  DRAFT
  ACTIVE
  EXPIRED
}

enum ApplicationStatus {
  PENDING
  REVIEW
  ACCEPTED
  REJECTED
}

enum ReviewDecision {
  APPROVED
  REJECTED
}

model Application {
  id          String            @id @default(uuid())
  jobSeeker   JobSeeker         @relation(fields: [jobSeekerId], references: [id])
  jobSeekerId String
  jobPost     JobPost           @relation(fields: [jobPostId], references: [id])
  jobPostId   String
  coverLetter String?
  status      ApplicationStatus @default(PENDING)
  appliedAt   DateTime          @default(now())

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  JuryEvaluation JuryEvaluation[]

  @@unique([jobSeekerId, jobPostId])
}
